@page "/"
@page "/profile"
@using Website.Personal.Client.Profile.Resumes

<PageTitle>Profile Page</PageTitle>
@if (!_loading)
{
    @if(Resume is null)
    {
        <p>Failed to load resume</p>
    }
    else
    {
        <MudCard Class="pa-5 mb-4">
            <h1 class="d-flex flex-row align-center"><MudIcon Icon="@Icons.Outlined.Summarize" Class="mr-1"/>Summary</h1>
            <p>@Resume.Summary</p>
        </MudCard>

        <MudCard Class="pa-5 mb-4">
            <h1 class="d-flex flex-row align-center"><MudIcon Icon="@Icons.Outlined.WorkOutline" Class="mr-1"/>Experience</h1>
            <div class="d-flex flex-column">
                @foreach (var exp in Resume.Experiences)
                {
                    <div class="d-flex justify-space-between">
                        <div class="d-flex flex-column">
                            <span>@exp?.Company, @exp?.Location.City, @exp?.Location.State</span>
                            <span class="orange-text">@exp?.Position</span>
                        </div>
                        <div>
                            @($"{exp?.StartDate.ToString("MMMM yyyy")} - ")@(exp?.EndDate is null ? "Current" : exp?.EndDate?.ToString("MMMM yyyy"))
                        </div>                   
                    </div>
                    <div class="d-flex flex-column">
                        @foreach (var res in exp?.Responsibitites)
                        {
                            <span class="ml-4">- @res</span>
                        }
                    </div>
                }
            </div>    
        </MudCard>

        <MudCard Class="pa-5">
            <h1 class="d-flex flex-row align-center"><MudIcon Icon="@Icons.Outlined.School" Class="mr-1"/>Education</h1>
            <div class="d-flex flex-column">
                @foreach (var edu in Resume.Educations)
                {
                    <div class="d-flex justify-space-between">
                        <div class="d-flex flex-column"> 
                            <span>@edu?.Institution, @edu?.Location.City, @edu?.Location.State</span>
                            <span class="orange-text ml-4">@edu?.Degree</span>
                            <span class="ml-4">GPA: @edu?.Grade</span>
                        </div>
                        <div>
                            @edu?.GraduationDate.ToString("MMMM yyyy")
                        </div>
                    </div>
                }
            </div>  
        </MudCard>    
    } 
}
else
{
    <MudProgressCircular Indeterminate />
}


@code {
    private Resume? Resume;
    private bool _loading;

    [Inject]
    private IMediator Mediator { get; set; } = null!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        var result = await Mediator.Send(new ResumeQuery());
        if (result.IsSuccess)
        {
            Resume = result.Value;

        }
        else
        {
            Resume = null;
            Snackbar.Add(string.Concat(result.Errors));
        }
        _loading = false;
    }
}