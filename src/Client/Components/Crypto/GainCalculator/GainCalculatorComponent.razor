@using Business.Queries.Crypto
@using Client.Components.Crypto.PricesTable
<MudContainer Class="d-flex flex-column pa-0 align-center" MaxWidth="MaxWidth.ExtraSmall">
    <MudContainer Class="d-flex flex-row pa-0">
        <MudContainer Class="d-flex flex-column pa-3 align-start">
            <MudNumericField Class="mb-2" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" @bind-Value="Inputs.PurchasedPrice" Label="Purchased Price" HideSpinButtons Immediate DebounceInterval="300" OnDebounceIntervalElapsed="Calculate"/>
            <MudNumericField Class="mb-2" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" @bind-Value="Inputs.SellPrice" Label="Selling Price" HideSpinButtons Immediate DebounceInterval="300" OnDebounceIntervalElapsed="Calculate"/>                   
        </MudContainer>
        <MudContainer Class="d-flex pa-3 flex-column">
            <MudNumericField Class="mb-2" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" @bind-Value="Inputs.Amount" Label="Amount" HideSpinButtons Immediate DebounceInterval="300" OnDebounceIntervalElapsed="Calculate"/>
            <MudText Typo="Typo.h6" Class="mb-2">@Outputs.GetFinal().ToString("C")</MudText>
            @((Outputs.GainRate*100).ToPercent(Typo.body1))
        </MudContainer>
    </MudContainer>
    <PricesTableComponent Assets="@_assets"
                          GetPrice="GetPriceAsync"/>
</MudContainer>

@code {
    private GainCalculatorInput Inputs = new();
    private GainCalculatorOutput Outputs = new();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private List<CryptoInfo> _assets =  CryptoAssets.Assets.Select(e => new CryptoInfo(e.Symbol, e.Name)).ToList();

    [Inject]
    private IMediator Mediator { get; set; } = null!;

    [Inject]
    private IState<GainCalculatorState> State {  get;  set; } = null!;

    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;

    private readonly string Base = "USDT";

    protected override void OnInitialized()
    {
        Inputs = State.Value.Input;
        Outputs = State.Value.Output;
        base.OnInitialized();
    }

    private void UpdateGainCalulatorState()
    {
        Dispatcher.Dispatch(new GainCalculatorInputsEnterAction() { Input = Inputs, Output = Outputs });
    }

    private async Task<CryptoPrice> GetPriceAsync(string symbol)
    {

        var result = await Mediator.Send(new CryptoPriceQuery(symbol, Base));
        if (result.IsSuccess)
        {
            return new CryptoPrice(symbol, Base, double.Parse(result.Value.LastPrice), double.Parse(result.Value.PriceChangePercent));
        }
        return new CryptoPrice(symbol, Base, null, null);
    }

    private void Calculate()
    {
        var validator = new GainCalculatorInputValidator();
        var validationResult = validator.Validate(Inputs);
        if (validationResult.IsValid)
        {
            var gainRate = (Inputs.SellPrice - Inputs.PurchasedPrice)/Inputs.PurchasedPrice;
            Outputs.Invesment = Inputs.Amount;
            Outputs.GainRate = gainRate;
            Outputs.Gain = gainRate * Inputs.Amount;
        }
        UpdateGainCalulatorState();
    }
}